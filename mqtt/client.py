import paho.mqtt.client as mqtt
import json
import time
from config import Config

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
devices = {}

def on_connect(client, userdata, flags, rc):
    """–ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if rc == 0:
        print("‚úÖ Connected to MQTT broker, subscribing to wsm/#")
        client.subscribe("wsm/#")
    else:
        print(f"‚ùå Failed to connect, return code {rc}")

def on_message(client, userdata, msg):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö MQTT-—Å–æ–æ–±—â–µ–Ω–∏–π."""
    topic = msg.topic
    try:
        payload = json.loads(msg.payload.decode("utf-8"))
    except json.JSONDecodeError:
        print(f"‚ö†Ô∏è JSON Decode Error: {msg.payload}")
        return

    print(f"üì• Received message: {topic} ‚Üí {payload}")

    if topic.startswith("wsm/"):
        parts = topic.split("/")
        if len(parts) < 3:
            return

        device_id = parts[1]

        if device_id not in devices:
            devices[device_id] = {
                "settings": {}, 
                "config": {}, 
                "state": {}, 
                "reboot_ack": None,
                "setting_ack": None,
                "config_ack": None,
                "payment_ack": None,
                "action_ack": None,
                "display": None,
                "denomination": [],
                 "monobank_api_key": Config.DEFAULT_MONOBANK_API_KEY, 
                "monobank_payments": []
            }

        request_id = payload.get("request_id", 234)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        if topic.endswith("/server/state/info"):
            devices[device_id]["state"] = payload
            print(f"üÜï State updated for {device_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        elif topic.endswith("/server/setting"):
            payload["request_id"] = request_id
            payload["received_at"] = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            devices[device_id]["settings"] = payload
            print(f"‚öôÔ∏è Settings received for {device_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        elif topic.endswith("/server/config"):
            payload["request_id"] = request_id
            payload["received_at"] = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º API-–∫–ª—é—á Monobank, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Ä–∞–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if "monobank_api_key" in devices[device_id]:
                payload["monobank_api_key"] = devices[device_id]["monobank_api_key"]
                
            devices[device_id]["config"] = payload
            print(f"üîß Config received for {device_id}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        elif topic.endswith("/server/setting/ack"):
            devices[device_id]["setting_ack"] = payload
            print(f"‚öôÔ∏è Settings ACK received for {device_id}: {payload}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        elif topic.endswith("/server/config/ack"):
            devices[device_id]["config_ack"] = payload
            print(f"üîß Config ACK received for {device_id}: {payload}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        elif topic.endswith("/server/reboot/ack"):
            devices[device_id]["reboot_ack"] = payload
            print(f"üîÑ Reboot ACK received for {device_id}")
            request_device_settings(device_id)
            request_device_config(device_id)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–µ–º–∞ –¥–µ–Ω–µ–≥
        elif topic.endswith("/server/denomination/info"):
            if "denomination" not in devices[device_id]:
                devices[device_id]["denomination"] = []
            devices[device_id]["denomination"].append(payload)
            print(f"üí∞ Denomination received for {device_id}: {payload}")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –¥–∏—Å–ø–ª–µ—è
        elif topic.endswith("/server/display"):
            devices[device_id]["display"] = payload
            print(f"üì∫ Display info received for {device_id}: {payload}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        elif topic.endswith("/server/payment/ack"):
            devices[device_id]["payment_ack"] = payload
            print(f"üí∞ Payment ACK received for {device_id}: {payload}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ Monobank
            if payload.get("code") == 0 and "monobank_payments" in devices[device_id]:
                pending_payments = [p for p in devices[device_id]["monobank_payments"] 
                                    if p.get("status") == "pending"]
                if pending_payments:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                    pending_payments[0]["status"] = "confirmed"
                    pending_payments[0]["confirmed_at"] = time.time()
                    print(f"üí∞ Monobank payment confirmed for {device_id}: {pending_payments[0]}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        elif topic.endswith("/server/action/ack"):
            devices[device_id]["action_ack"] = payload
            print(f"üîÑ Action ACK received for {device_id}: {payload}")

def request_device_settings(device_id):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/setting/get"
        payload = json.dumps({"request_id": 234, "fields": []})
        print(f"üì§ Requesting settings for {device_id}...")
        client.publish(topic, payload)

def request_device_config(device_id):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/config/get"
        payload = json.dumps({"request_id": 234, "fields": []})
        print(f"üì§ Requesting config for {device_id}...")
        client.publish(topic, payload)

def update_device_settings(device_id, new_settings):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if device_id in devices and "settings" in devices[device_id]:
        topic = f"wsm/{device_id}/client/setting/set"
        
        # –ó–∞–º–µ–Ω–∞ None –Ω–∞ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        for key in new_settings:
            if new_settings[key] is None:
                new_settings[key] = 0
                
        new_settings["request_id"] = devices[device_id]["settings"].get("request_id", 234)
        payload = json.dumps(new_settings)
        print(f"üì§ Sending updated settings to {device_id}: {new_settings}")
        client.publish(topic, payload)

def update_device_config(device_id, new_config):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if device_id in devices and "config" in devices[device_id]:
        topic = f"wsm/{device_id}/client/config/set"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API-–∫–ª—é—á Monobank –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if "monobank_api_key" in new_config:
            update_monobank_api_key(device_id, new_config["monobank_api_key"])
            # –£–¥–∞–ª—è–µ–º API-–∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            del new_config["monobank_api_key"]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –º–∞—Å—Å–∏–≤—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü –Ω–æ–º–∏–Ω–∞–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for key in ['bill_table', 'coin_table']:
            if key in new_config and isinstance(new_config[key], str):
                try:
                    new_config[key] = [int(x.strip()) for x in new_config[key].split(',') if x.strip()]
                except ValueError:
                    print(f"‚ö†Ô∏è Error converting {key} to array, using empty array")
                    new_config[key] = []
                    
        # –ó–∞–º–µ–Ω–∞ None –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for key in new_config:
            if new_config[key] is None:
                if key in ['broker_port', 'OTA_port', 'timeZone', 'coinPulsePrice']:
                    new_config[key] = 0
                elif key in ['broker_uri', 'OTA_server', 'wifi_STA_ssid', 'wifi_STA_pass', 'ntp_server', 'broker_user', 'broker_pass']:
                    new_config[key] = ""
        
        new_config["request_id"] = devices[device_id]["config"].get("request_id", 234)
        payload = json.dumps(new_config)
        print(f"üì§ Sending updated config to {device_id}: {new_config}")
        client.publish(topic, payload)

def update_monobank_api_key(device_id, api_key):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ API-–∫–ª—é—á–∞ Monobank –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API-–∫–ª—é—á –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–≥–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        devices[device_id]["monobank_api_key"] = api_key
        print(f"üîë Monobank API key updated for {device_id}")
        
        # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—â–µ –Ω–µ—Ç –ø–æ–ª—è API-–∫–ª—é—á–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if "config" in devices[device_id]:
            devices[device_id]["config"]["monobank_api_key"] = api_key

def send_reboot_command(device_id, delay):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/reboot/set"
        payload = json.dumps({"request_id": 234, "delay": delay})
        print(f"üì§ Sending reboot command to {device_id} with delay {delay}")
        client.publish(topic, payload)

def get_device_state(device_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    return devices.get(device_id, {}).get("state", {})

def request_display_info(device_id):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –¥–∏—Å–ø–ª–µ—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/display/get"
        payload = json.dumps({"request_id": 234, "fields": ["line_1", "line_2"]})
        print(f"üì§ Requesting display info for {device_id}...")
        client.publish(topic, payload)

def send_qrcode_payment(device_id, order_id, amount):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–ª–∞—Ç—ã QR-–∫–æ–¥–æ–º –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if not check_mqtt_connection():
        print("‚ùå Cannot send payment: MQTT not connected")
        return False
        
    if device_id in devices:
        topic = f"wsm/{device_id}/client/payment/set"
        payload = {
            "request_id": 234,
            "addQRcode": {
                "order_id": order_id,
                "amount": amount
            }
        }
        
        mqtt_payload = json.dumps(payload)
        print(f"üì§ Sending QR code payment to {device_id}: {amount} kopecks, order_id: {order_id}")
        print(f"üì¶ Full payload: {mqtt_payload}")
        
        result = client.publish(topic, mqtt_payload)
        if result.rc == 0:
            print(f"‚úÖ MQTT message sent successfully")
        else:
            print(f"‚ùå MQTT publish failed with code {result.rc}")
            return False

def send_free_payment(device_id, amount):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/payment/set"
        payload = json.dumps({
            "request_id": 234,
            "addFree": {
                "amount": amount
            }
        })
        print(f"üì§ Sending free payment to {device_id}: {amount} kopecks")
        client.publish(topic, payload)

def clear_payment(device_id, clear_options=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω—É–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    if device_id in devices:
        if clear_options is None:
            clear_options = {
                "CoinClear": True,
                "BillClear": True,
                "PrevClear": True,
                "FreeClear": True,
                "QRcodeClear": True,
                "PayPassClear": True
            }
        
        topic = f"wsm/{device_id}/client/payment/set"
        payload = json.dumps({
            "request_id": 234,
            **clear_options
        })
        print(f"üì§ Clearing payment for {device_id}")
        client.publish(topic, payload)

def send_action_command(device_id, pour=None, blocking=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–µ–π—Å—Ç–≤–∏—è (–ø—Ä–æ–ª–∏–≤ –≤–æ–¥—ã/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)."""
    if device_id in devices:
        topic = f"wsm/{device_id}/client/action/set"
        payload = {"request_id": 234}
        
        if pour in ["Start", "Stop"]:
            payload["Pour"] = pour
            
        if blocking is not None:
            payload["Blocking"] = blocking
            
        print(f"üì§ Sending action command to {device_id}: {payload}")
        client.publish(topic, json.dumps(payload))

def get_monobank_payments_history(device_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π Monobank."""
    if device_id in devices:
        return devices[device_id].get("monobank_payments", [])
    return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MQTT-–∫–ª–∏–µ–Ω—Ç–∞
client = mqtt.Client()
client.username_pw_set(Config.MQTT_USERNAME, Config.MQTT_PASSWORD)
client.on_connect = on_connect
client.on_message = on_message

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É
try:
    client.connect(Config.MQTT_BROKER, Config.MQTT_PORT, 60)
    client.loop_start()
    print(f"üîå Connecting to MQTT broker {Config.MQTT_BROKER}:{Config.MQTT_PORT}")
except Exception as e:
    print(f"‚ùå Failed to connect to MQTT broker: {e}")